---
- name: 安装和配置Kubernetes集群
  hosts: k8s_cluster
  become: yes
  vars:
    k8s_packages:
      - kubelet
      - kubeadm
      - kubectl
    
  tasks:
    - name: 添加Kubernetes APT密钥
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
      when: ansible_os_family == "Debian"
    
    - name: 添加Kubernetes APT仓库
      apt_repository:
        repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
        state: present
      when: ansible_os_family == "Debian"
    
    - name: 更新包缓存
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"
    
    - name: 安装指定版本的Kubernetes组件
      package:
        name: "{{ item }}={{ k8s_version }}-00"
        state: present
      loop: "{{ k8s_packages }}"
      when: ansible_os_family == "Debian"
    
    - name: 锁定Kubernetes包版本
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop: "{{ k8s_packages }}"
      when: ansible_os_family == "Debian"
    
    - name: 启动并启用kubelet服务
      systemd:
        name: kubelet
        enabled: yes
        state: started

- name: 初始化Kubernetes主节点
  hosts: k8s_masters[0]
  become: yes
  tasks:
    - name: 检查集群是否已初始化
      stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_init_check
    
    - name: 初始化Kubernetes集群
      command: >
        kubeadm init 
        --kubernetes-version={{ k8s_version }}
        --pod-network-cidr=10.244.0.0/16
        --service-cidr=10.96.0.0/12
        --apiserver-advertise-address={{ ansible_default_ipv4.address }}
        --control-plane-endpoint={{ ansible_default_ipv4.address }}:6443
        --upload-certs
      register: kubeadm_init
      when: not k8s_init_check.stat.exists
    
    - name: 创建kubectl配置目录
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
    
    - name: 复制kubectl配置文件
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
        remote_src: yes
    
    - name: 安装Flannel网络插件
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/v{{ flannel_version }}/Documentation/kube-flannel.yml
      become_user: "{{ ansible_user }}"
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
    
    - name: 获取join token
      shell: kubeadm token create --print-join-command
      register: join_command
      when: not k8s_init_check.stat.exists
    
    - name: 保存join command到本地
      local_action:
        module: copy
        content: "{{ join_command.stdout }}"
        dest: "/tmp/k8s-join-command"
      when: not k8s_init_check.stat.exists

- name: 加入其他主节点到集群
  hosts: k8s_masters[1:]
  become: yes
  tasks:
    - name: 检查节点是否已加入集群
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: node_joined
    
    - name: 获取certificate key
      shell: kubeadm init phase upload-certs --upload-certs | tail -1
      delegate_to: "{{ groups['k8s_masters'][0] }}"
      register: cert_key
      when: not node_joined.stat.exists
    
    - name: 加入主节点到集群
      shell: "{{ lookup('file', '/tmp/k8s-join-command') }} --control-plane --certificate-key {{ cert_key.stdout }}"
      when: not node_joined.stat.exists

- name: 加入工作节点到集群
  hosts: k8s_workers
  become: yes
  tasks:
    - name: 检查节点是否已加入集群
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: node_joined
    
    - name: 加入工作节点到集群
      shell: "{{ lookup('file', '/tmp/k8s-join-command') }}"
      when: not node_joined.stat.exists

- name: 配置kubectl和验证集群
  hosts: k8s_masters[0]
  become_user: "{{ ansible_user }}"
  tasks:
    - name: 等待所有节点就绪
      shell: kubectl get nodes --no-headers | grep -v Ready | wc -l
      register: not_ready_nodes
      until: not_ready_nodes.stdout == "0"
      retries: 30
      delay: 10
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
    
    - name: 显示集群状态
      shell: kubectl get nodes -o wide
      register: cluster_status
      environment:
        KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
    
    - name: 输出集群状态
      debug:
        msg: "{{ cluster_status.stdout_lines }}"
    
    - name: 安装Helm
      shell: |
        curl https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz | tar xz
        sudo mv linux-amd64/helm /usr/local/bin/helm
        rm -rf linux-amd64
      args:
        creates: /usr/local/bin/helm